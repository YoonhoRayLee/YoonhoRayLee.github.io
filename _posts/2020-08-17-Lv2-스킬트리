---
layout: post
title: (프로그래머스 Lv1) 스킬트리
subtitle: 스킬트리
cover-img: /assets/img/path.jpg
tags: [프로그래머스, Lv2, list]
category: 스킬트리








---

<center>
  <h2>
    Lv2. 스킬트리 ( Python )
  </h2>
</center>

------

[Lv2. 스킬트리](https://programmers.co.kr/learn/courses/30/lessons/49993)

### <span style="color:skyblue"># 문제 설명</span>

선행 스킬이란 어떤 스킬을 배우기 전에 먼저 배워야 하는 스킬을 뜻합니다.

예를 들어 선행 스킬 순서가 `스파크 → 라이트닝 볼트 → 썬더`일때, 썬더를 배우려면 먼저 라이트닝 볼트를 배워야 하고, 라이트닝 볼트를 배우려면 먼저 스파크를 배워야 합니다.

위 순서에 없는 다른 스킬(힐링 등)은 순서에 상관없이 배울 수 있습니다. 따라서 `스파크 → 힐링 → 라이트닝 볼트 → 썬더`와 같은 스킬트리는 가능하지만, `썬더 → 스파크`나 `라이트닝 볼트 → 스파크 → 힐링 → 썬더`와 같은 스킬트리는 불가능합니다.

선행 스킬 순서 skill과 유저들이 만든 스킬트리[1](https://programmers.co.kr/learn/courses/30/lessons/49993#fn1)를 담은 배열 skill_trees가 매개변수로 주어질 때, 가능한 스킬트리 개수를 return 하는 solution 함수를 작성해주세요.

### <span style="color:skyblue"># 제한 사항</span>

- 스킬은 알파벳 대문자로 표기하며, 모든 문자열은 알파벳 대문자로만 이루어져 있습니다.
- 스킬 순서와 스킬트리는 문자열로 표기합니다.
  - 예를 들어, `C → B → D` 라면 CBD로 표기합니다
- 선행 스킬 순서 skill의 길이는 1 이상 26 이하이며, 스킬은 중복해 주어지지 않습니다.
- skill_trees는 길이 1 이상 20 이하인 배열입니다.
- skill_trees의 원소는 스킬을 나타내는 문자열입니다.
  - skill_trees의 원소는 길이가 2 이상 26 이하인 문자열이며, 스킬이 중복해 주어지지 않습니다.

### <span style="color:skyblue"># 입출력 예</span>

| skill   | skill_trees                         | return |
| ------- | ----------------------------------- | ------ |
| `"CBD"` | `["BACDE", "CBADF", "AECB", "BDA"]` | 2      |

##### 입출력 예 설명

- BACDE: B 스킬을 배우기 전에 C 스킬을 먼저 배워야 합니다. 불가능한 스킬트립니다.
- CBADF: 가능한 스킬트리입니다.
- AECB: 가능한 스킬트리입니다.
- BDA: B 스킬을 배우기 전에 C 스킬을 먼저 배워야 합니다. 불가능한 스킬트리입니다.

<br>

 **문제 해결 시 고려사항**

- **각 스킬트리에 대한 skill 순서 검증**

>  본 문제는 주어지는 skill_trees 리스트 내의 각 스킬트리에 대해 해당 스킬트리가 주어지는 skill의 순서를 지키고 있는지 검사하여 지키고 있다면 answer를 증가시켜 반환하는 문제이다. 
>
>  ```python
>  for sk in skill_trees:
>          tmp = []
>          # 각 스킬트리에 대해 skill 내에 존재하는 스킬 tmp에 추가
>          for j in sk:
>              if j in skill:
>                  tmp.append(j)
>          flag = 1
>          # tmp내의 스킬들이 skill의 순서를 지키고 있는지 검사
>          for k in range(len(tmp)):
>              if tmp[k] == skill[k]:
>                  flag *= 1
>              else:
>                  flag *= 0
>          # 해당 스킬트리가 선행 스킬 순서를 지켰다면 answer +1        
>          if flag == 1:
>              answer += 1    
>  ```
>
>  필자는 위와 같이 각 스킬트리에 대해 tmp 리스트를 만들어 스킬트리 내의 스킬들이 skill 내의 스킬이라면 tmp 리스트에 추가하여 이 후, skill의 순서 또한 지키고 있는지 검사하는 방식으로 구현하였다.
>
>  <br>

<br>

### 전체 코드

```python
def solution(skill, skill_trees):
    answer = 0    
    for sk in skill_trees:
        tmp = []
        # 각 스킬트리에 대해 skill 내에 존재하는 스킬 tmp에 추가
        for j in sk:
            if j in skill:
                tmp.append(j)
        flag = 1
        # tmp내의 스킬들이 skill의 순서를 지키고 있는지 검사
        for k in range(len(tmp)):
            if tmp[k] == skill[k]:
                flag *= 1
            else:
                flag *= 0
        # 해당 스킬트리가 선행 스킬 순서를 지켰다면 answer +1        
        if flag == 1:
            answer += 1         
    return answer
```

